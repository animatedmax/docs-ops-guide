---
title: Providing a Certificate for Your SSL Termination Point
owner: RelEng
---

<strong><%= modified_date %></strong>

This topic describes how to configure TLS/SSL termination in [Pivotal Cloud Foundry](https://network.pivotal.io/products/pivotal-cf) (PCF) Elastic Runtime with an SSL certificate, as part of the process of configuring Elastic Runtime for deployment. 


##<a id="ssl_term"></a> Certificate Requirements for PCF

The following requirements apply to certificates in PCF:

* You must obtain at least one SSL/TLS certificate for your environment. 
  * In a production environment, use a signed SSL/TLS certificate (trusted) from a known certificate authority (CA).
  * In a development or testing environment, you can use a trusted CA certificate or a self-signed certificate. You can generate a self-signed certificate with `openssl` or a similar tool, or use the Elastic Runtime Ops Manager interface to [generate a certificate](#ert_certgen) for you.
   <p class="note"><strong>Note</strong>: Certificates generated in Elastic Runtime are signed by the Ops Manager Certificate Authority. They are not technically self-signed, but they are sometimes referred to as "Self-Signed Certificates" in the Ops Manager UI and throughout this documentation.</p>
* Certificates used in PCF must be encoded in the PEM format.
* When you generate a certificate, save the private key used to generate your certficate in a safe place. You must upload its contents to the Elastic Runtime networking configuration.
* The certificate on the Gorouter must be associated with the correct hostname so that HTTPS can validate the request.
* If wildcard certificates are not supported for some or all of your domains, then configure termination requests at the [load balancer only](#lb_term). In this type of deployment, the load balancer passes unencrypted traffic to the Gorouter.
* Extended Validation (EV) certs support multiple hostnames, like SAN, but do not support wildcards. For this reason, if EV certs are required, then terminate TLS/SSL at the [load balancer only](#lb_term) in order to avoid having to reissue and reinstall certificates on the Gorouter for every app or UAA security zone.

### <a id="aws_certs"></a> Certificate Requirements on AWS

If you are deploying PCF on AWS, the certificate configured in Elastic Runtime must match the certificate that you uploaded to AWS earlier in the [Upload an SSL Certificate](../customizing/cloudform-template.html#upload-cert) section of the [Deploying the CloudFormation Template for PCF on AWS](../customizing/cloudform-template.html) topic.

### <a id="gcp_certs"></a> Certificate Requirements on GCP

If you are deploying PCF on GCP, you must add your certificate to both the frontend configuration of your HTTP Load Balancer and to the Elastic Runtime Router. For more information, see [../customizing/gcp-prepare-env.html#create-http-and-instance-group](Create Instance Groups and the HTTP(S) Load Balancer).

When configuring the point-of-entry for a GCP deployment, select <b>Forward SSL to Elastic Runtime Router</b> in your Elastic Runtime network configuration.

## <a id="ssl_term"></a> About SSL/TLS Termination in PCF Elastic Runtime

During a deployment of PCF Elastic Runtime, there are three SSL point-of-entry options in your Elastic Runtime configuration. You can terminate TLS/SSL at one of the following entry points into PCF:

* Gorouter
* Load balancer and Gorouter
* Load balancer
* HAProxy

The following table summarizes SSL/TLS termination options in PCF and provides guidance on which option to choose for your deployment.

<table border="1" class="nice">
<tr>
  <th>If the following applies to you:</th>
  <th>Then terminate SSL/TLS at:</th>
  <th>Related configuration procedure:</th>
  </tr>
  <tr>
  <td><ul>
  <li>You want the most performant and recommended option, and </li>
  <li>You can use a single SAN certificate for your deployment for your wildcard domains, and </li>
  <li>You can associate that certificate with the hostname associated with the HTTP requests.</li>
  </ul></td>
  <td>
   Gorouter only. Select the <b>Forward SSL to Elastic Runtime Router</b> in your Elastic Runtime network configuration.
  </td>
  <td><a href="#gorouter">Configuring SSL/TLS Termination at Gorouter</a>
  </td>
  </tr>
  <tr>
    <td><ul>
    <li>You have multiple domains that require multiple certificates for domain verification, and</li>
    <li>You want to send only encrypted traffic between the load balancer and the Gorouter, and</li>
    <li>You do not mind a slightly less performant deployment.</li>
    </td>
    <td>Gorouter and load balancer. Select the <b>Forward SSL to Elastic Runtime Router</b> in your Elastic Runtime network configuration. 
    </td>
    <td><a href="#gorouter_lb">Configuring SSL/TLS Termination at Gorouter</a>
    </td>

  </tr>
  <tr>
  <td>
  <ul><li>You cannot use wildcard certificates for some or all of your domains, or</li>
  <li>You are using Extended Validation (EV) certificates.</li>
  </ul>
  </td>
  <td>Load balancer only. Select the <b>Forward unencrypted traffic to Elastic Runtime Router</b>
  </td>
  <td><a href="unencrypted">link</a>
  </td>
  </tr>
   <tr>
  <td><ul>
  <li>You can use a single SAN certificate for your deployment, and </li>
  <li>You are deploying a test or development environment, or</li>
  <li>You do not mind a slightly less performant deployment, or</li>
  <li>You cannot configure your load balancer to forward HTTP headers.</li>
  </ul>
  </td>
  <td>
  HA Proxy. Select the <b>Forward SSL to HA Proxy</b>. 
  </td>
  <td> 
  </td>
  </tr>
</tr></table>

## <a id="ssl_term_ert_config"></a>

### <a id="gorouter"></a>Procedure: Configuring SSL Termination at the Elastic Runtime Router


1. Configure your load balancer to pass through requests from the client to the Gorouter.

1. Navigate to the Ops Manager Installation Dashboard.

1. Click the **Elastic Runtime** tile in the Installation Dashboard.

1. Click **Networking**.

1. Under **Select one of the following point-of-entry options**, select the first option, **Forward SSL to Elastic Runtime Router**.

1. Enter your PEM encoded certificate and your PEM encoded private key in the fields under **Router SSL Termination Certificate and Private Key**.

1. If you want to use a specific set of SSL ciphers for the Router, configure **Router SSL Ciphers**. Enter a colon-separated list of custom SSL ciphers to pass to the router. Otherwise, leave this field blank.

1. Skip to [step 6](#save).
    <%= image_tag("ssl-termination-router.png") %>

### <a id="gorouter_lb"></a>Procedure: Configuring SSL Termination at the Elastic Runtime Router and External Load Balancer

1. Navigate to the Ops Manager Installation Dashboard.

1. Click the **Elastic Runtime** tile in the Installation Dashboard.

1. Click **Networking**.

1. Under **Select one of the following point-of-entry options**, select the first option, **Forward SSL to Elastic Runtime Router**.

1. Enter your PEM encoded certificate and your PEM encoded private key in the fields under **Router SSL Termination Certificate and Private Key**.
   * See 

1. If you want to use a specific set of SSL ciphers for the Router, configure **Router SSL Ciphers**. Enter a colon-separated list of custom SSL ciphers to pass to the router. Otherwise, leave this field blank.

1. Click **Save**.
 
1. Add the certificate you configured in Elastic Runtime to your load balancer, and configure its listening port. The procedures vary depending on your IaaS.

1. Configure your load balancer to append the X-Forwarded-For and X-Forwarded-Proto headers to client requests.

1. Configure your load balancer to append the `X-Forwarded-For` and `X-Forwarded-Proto` headers to client requests.

    <br/>If the load balancer cannot be configured to provide the `X-Forwarded-For` header, the Gorouter will append it in requests forwarded to applications and system components, set to the IP address of the load balancer.

    <p class='note'><strong>Note</strong>: If the load balancer accepts unencrypted requests, it <strong>must</strong> provide the X-Forwarded-Proto header. Conversely, if the load balancer cannot be configured to send the X-Forwarded-Proto header, it should not accept unencrypted requests. Otherwise, applications and platform system components that require encrypted client requests will accept unencrypted requests when they should not accept them.</p>


### <a id="haproxy"></a>Procedure: Configuring SSL Termination at Load Balancer


1. Navigate to the Ops Manager Installation Dashboard.

1. Click the **Elastic Runtime** tile in the Installation Dashboard.

1. Click **Networking**.

  1. Under **Select one of the point-of-entry-options**, select the first option, **Forward SSL to Elastic Runtime Router**.
  2. Enter your PEM encoded certificate and your PEM encoded private key in the fields under **Router SSL Termination Certificate and Private Key**. For instructions on how to create a certificate, see [] (#create_certs))
 .
  4. If you want to use a specific set of SSL ciphers for the Router, configure **Router SSL Ciphers**. Enter a colon-separated list of custom SSL ciphers to pass to the router. Otherwise, leave this field blank.
  5. Skip to [step 6](#disablessl).
      <%= image_tag("ssl-termination-router.png") %>


1. Click **Save**.

1. Add the certificate you configured in Elastic Runtime to your load balancer, and configure its listening port. The procedures vary depending on your IaaS.

1. Configure your load balancer to append the X-Forwarded-For and X-Forwarded-Proto headers to client requests.

1. Configure your load balancer to append the `X-Forwarded-For` and `X-Forwarded-Proto` headers to client requests.

    <br/>If the load balancer cannot be configured to provide the `X-Forwarded-For` header, the Gorouter will append it in requests forwarded to applications and system components, set to the IP address of the load balancer.

    <p class='note'><strong>Note</strong>: If the load balancer accepts unencrypted requests, it <strong>must</strong> provide the X-Forwarded-Proto header. Conversely, if the load balancer cannot be configured to send the X-Forwarded-Proto header, it should not accept unencrypted requests. Otherwise, applications and platform system components that require encrypted client requests will accept unencrypted requests when they should not accept them.</p>


### <a id="haproxy"></a>Procedure: Configuring SSL Termination at HA Proxy

1. Navigate to the Ops Manager Installation Dashboard.

1. Click the **Elastic Runtime** tile in the Installation Dashboard.

1. Click **Networking**.

1. Under **Select one of the point-of-entry-options**, select the third option, **Forward SSL to HA Proxy**.
2. 
  2. Enter your PEM encoded certificate and your PEM encoded private key in the fields under **SSL Termination Certificate and Private Key**.
  
  3. If you want to use a specific set of SSL ciphers for HAProxy, configure **HAProxy SSL Ciphers**. Enter a colon-separated list of custom SSL ciphers to pass to HAProxy. Otherwise, leave this field blank.
  1. If you want HAProxy to only allow HTTPS traffic, select **Disable HTTP traffic to HAProxy**.
    <%= image_tag("ssl-termination.png") %>

  1. Under **Select one of the point-of-entry-options**, select the first option, **Forward SSL to Elastic Runtime Router**.
  2. Enter your PEM encoded certificate and your PEM encoded private key in the fields under **Router SSL Termination Certificate and Private Key**.
 .
  3. Click **Generate RSA Certificate** to populate the **Router SSL Termination Certificate and Private Key** fields with RSA certificate and private key information. Enter your system and app domains in wildcard format. Optionally, also add custom domains in wildcard format. 
    You can generate a single certificate for two domains separated by a comma, such as `*.apps.EXAMPLE.com, *.system.EXAMPLE.com`. 
    <%= image_tag("generate-cert.png") %>
    <p class="note"><strong>Note</strong>: SSL certificates generated for wildcard DNS records only work for a single domain name component or component fragment. For example, a certificate generated with <code>\*.EXAMPLE.com</code> does not work for <code>apps.EXAMPLE.com</code> and <code>system.EXAMPLE.com</code>. The certificate must have both <code>apps.EXAMPLE.com</code> and <code>system.EXAMPLE.com</code> attributed to it. </p>
  4. If you want to use a specific set of SSL ciphers for the Router, configure **Router SSL Ciphers**. Enter a colon-separated list of custom SSL ciphers to pass to the router. Otherwise, leave this field blank.
  5. Skip to [step 6](#disablessl).
      <%= image_tag("ssl-termination-router.png") %>


##<a id="create_or_obtain_certs"></a> Creating a Certificate for PCF Deployments

This section describes how to create or generate a certificate for your PCF Elastic Runtime environment. If you are deploying to a production environment, you should obtain a certificate from a trusted authority (CA).

For internal development or testing environments, you have several options for creating a required SSL certificates. You can create a self-signed certificate or have [Elastic Runtime generate the certificate for you](#ert_certgen). 

To create a self-signed certificate, you can use a wide variety of tools including OpenSSL, Java's keytool, Adobe Reader, and Apple's Keychain. 

Apply the following rules when creating the Certificate Signing Request (CSR) for either self-signed or trusted single certificates:

* Specify your registered wildcard domain as the `Common Name`. For example, `*.yourdomain.com`.
* If you are using a split domain setup that separates the domains for `apps` and `system` components (recommended), then enter the following values in the `Subject Alternative Name` of the certificate:
    * *.apps.yourdomain.com
    * *.system.yourdomain.com
    * *.login.system.yourdomain.com
    * *.uaa.system.yourdomain.com
* If you are using a single domain setup, then use the following values as the `Subject Alternative Name` of the certificate:
    * *.login.system.yourdomain.com
    * *.uaa.system.yourdomain.com

### <a id="ert_certgen"></a> Generating a RSA Certificate in Elastic Runtime

1. Navigate to the Ops Manager Installation Dashboard.

1. Click the **Elastic Runtime** tile in the Installation Dashboard.

1. Click **Networking**.
2. 
1. Click **Generate RSA Certificate** to populate the **Router SSL Termination Certificate and Private Key** fields with RSA certificate and private key information.
  
1. If you are using a split domain setup that separates the domains for `apps` and `system` components (recommended), then enter the following domains for the certificate:
    * *.yourdomain.com
    * *.apps.yourdomain.com
    * *.system.yourdomain.com
    * *.login.system.yourdomain.com
    * *.uaa.system.yourdomain.com
    
    For example:
  `*.example.com, *.apps.example.com, *.system.example.com, *.login.system.example.com,  
    <%= image_tag("generate-cert.png") %>
    <p class="note"><strong>Note</strong>: SSL certificates generated for wildcard DNS records only work for a single domain name component or component fragment. For example, a certificate generated with <code>\*.EXAMPLE.com</code> does not work for <code>apps.EXAMPLE.com</code> and <code>system.EXAMPLE.com</code>. The certificate must have both <code>apps.EXAMPLE.com</code> and <code>system.EXAMPLE.com</code> attributed to it. </p>
    
    




